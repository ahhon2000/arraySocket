#!/usr/bin/python3
try:from pathlib import Path as P;R=P.resolve;E=P.exists; F = R(P(__file__));\
    L = lambda p: p / 'cfg.py'; from handyPyUtil import A; exec(A)
except: O=open(R(next(filter(E,map(L,F.parents))))); exec(O.read()); O.close()

import re
import time
from threading import Thread, Event, Condition
from itertools import chain

from handyPyUtil.db import Database_mysql
from handyPyUtil.loggers.convenience import fmtExc

from arraySocket import client, server, ASUser
from . import TestKitAS
from ..server.ServerMessageArray import SRV_ERR_MSG_CODES
from ..server import UsersTbl
from ..server.dbUsersTbl import DBUsersTbl

from .spawnUsers import spawnUsers


def execAdminCmd(gl, n, cmd, cb=None, relogin=True):
    gl['adminLoggedIn'].wait(timeout=0.2)

    cliDicts = gl['cliDicts']
    cli = cliDicts[n]['cli']
    assert n == cli.user
    k = cli.authKey

    def onResponse(m):
        st = m.get('status', 63)
        assert st == 0, f"status={st}: {m.get('descr')}"
        if cb: cb()
        if relogin: cli.login()

    m = {
        'type': 'admin',
        'command': cmd,
        'user': n,
        'authKey': k,
        'callback': onResponse,
    }

    admCli = cliDicts['admin']['cli']
    admCli.pushMessage(m)
    admCli.sendMessages()

def userGotErrorFromSrv(cli, gl, m):
    code = m.get('code', 127)
    n = cli.user
    cliDict = gl['cliDicts'][n]

    tk = gl['tk']
    tk.logger.debug(f"user {n} received an error message from server (code={code}); waitingForAccessDenied = {'set' if cliDict['waitingForAccessDenied'].isSet() else 'unset'}")

    if code == SRV_ERR_MSG_CODES.access_denied.value:
        if cliDict['waitingForAccessDenied'].isSet():
            cliDict['waitingForAccessDenied'].clear()
            tk.logger.debug(f'calling cli.login()')
            cli.login()

def logoutUser(gl, n, cb=None):
    execAdminCmd(gl, n, 'logoutUser', cb=cb, relogin=False)

def registerAuthKey(gl, n):
    tk = gl['tk']
    tk.logger.debug(f'registering the key of user {n}')
    execAdminCmd(gl, n, 'addAuthKey')

def rmAuthKey(gl, n):
    i = gl['cliDicts'][n]['user'].index

    cmd = 'rmAuthKey' if i % 2 else 'rmAllAuthKeys'
    execAdminCmd(gl, n, cmd)

def adminOnAuth(cli, gl, authst):
    assert cli.user == 'admin'
    gl['adminLoggedIn'].set()

def userOnAuth(cli, gl, authst):
    n = cli.user
    assert n != 'admin'

    cliDicts = gl['cliDicts']
    cliDict = cliDicts[n]
    tk = gl['tk']

    for step, ev in enumerate(cliDict['authSteps']):
        if ev.isSet(): continue

        tk.logger.debug(f'Executing auth. step {step}; authst={authst.status}')

        if step == 0:
            assert authst.status != 0
            cli.authKey = k = f'secret_{n}'
            registerAuthKey(gl, n)
        elif step == 1:
            assert authst.status == 0
            rmAuthKey(gl, n)
        elif step == 2:
            assert authst.status != 0
            registerAuthKey(gl, n)
        elif step == 3:
            assert authst.status == 0
            cliDict['waitingForAccessDenied'].set()

            def onLogout():
                cli.pushMessage({'type': 'test'})
                cli.sendMessages()
            logoutUser(gl, n, cb=onLogout)
        elif step == 4:
            assert authst.status == 0
            mainCond = gl['mainCond']
            with mainCond:
                gl['NFinishedUsers'] += 1
                mainCond.notify_all()
        ev.set()
        break


def initUsers(gl):
    cliDicts = spawnUsers(gl['case']['NUsers'])

    for n, cliDict in cliDicts.items():
        cliDict.update({
            'authSteps': tuple(Event() for step in range(5)),
            'waitingForAccessDenied': Event(),
        })

    return cliDicts


def doTest(case):
    with TestKitAS() as tk:
        NUsers = case['NUsers']
        mainCond = Condition()

        gl = {
            'case': case,
            'mainCond': mainCond,
            'NFinishedUsers': 0,
            'adminLoggedIn': Event(),
            'tk': tk,
        }

        cliDicts = initUsers(gl)
        gl['cliDicts'] = cliDicts

        class SMAClass_srv(server.ServerMessageArray.cloneClass(
            add_MSG_TYPES = ['test']
        )): pass

        class CMAClass_srv(server.ClientMessageArray.cloneClass(
            add_MSG_TYPES = ['test']
        )):
            def on_test(self, m):
                self.pushMessage({
                    'type': 'test',
                }, cbFromCliMsg=m)

        class SMAClass_cli(client.ServerMessageArray):
            def on_auth(self, m):
                authst = super().on_auth(m)
                cli = self.cli
                if cli.user == 'admin':
                    adminOnAuth(cli, gl, authst)
                else:
                    userOnAuth(cli, gl, authst)

            def on_test(self, m): pass
            def on_admin(self, m): pass

            def on_error(self, m):
                super().on_error(m)
                cli = self.cli
                if cli.user != 'admin':
                    userGotErrorFromSrv(cli, gl, m)

        UsersTblCls = case['UsersTblCls']
        usersTbl_kwarg = {}
        maxInitSec = 0.1   # seconds to wait while the server initialises
        if UsersTblCls is UsersTbl:
            usersTbl_kwarg.update({
                'authUsersInMem': True,
                'staticUsers': [d['user'] for d in cliDicts.values()],
            })
        elif issubclass(UsersTblCls, DBUsersTbl):
            class UsersTblCls(UsersTblCls):
                def __init__(self, *arg, **kwarg):
                    tk.logger.debug('Initialising DBUsersTbl')
                    try:
                        tk.logger.debug('Getting a dbobj for DBUsersTbl')
                        dbobj = tk.connect(DBCls=Database_mysql)
                        tk.logger.debug('calling DBUsersTbl.__init__()')
                        super().__init__(*arg, dbobj=dbobj, **kwarg)

                        ak = next(iter(cliDicts['admin']['user'].authKeys))
                        tk.logger.debug(f"adding the admin's key: {ak}")
                        self.addAuthKey('admin', ak, isAdmin=True)

                        tk.logger.info(f"DBUsersTbl initialised!")
                    except Exception as e:
                        msg = fmtExc(e, inclTraceback=True)
                        tk.logger.error(msg)
            usersTbl_kwarg.update({})
            maxInitSec = 0.3
        else: raise Exception(f'unsupported UsersTblCls={type(UsersTblCls)}')

        srvProc = tk.startServer(
            SMAClass=SMAClass_srv,
            CMAClass=CMAClass_srv,
            UsersTblCls = UsersTblCls,
            usersTbl_kwarg = usersTbl_kwarg,
        )
        time.sleep(maxInitSec)

        for n, cliDict in cliDicts.items():
            u = cliDict['user']
            cli, thCli = tk.startClient(SMAClass=SMAClass_cli, user=u)
            cliDict.update({'cli': cli, 'thCli': thCli})

        # wait for the clients to finish their tasks
        with mainCond:
            mainCond.wait_for(
                lambda: gl['NFinishedUsers'] == NUsers,
                timeout = 0.2 * (NUsers + 1),
            )

        tk.logger.info(f'All clients should have finished by now')

        assert gl['NFinishedUsers'] == NUsers, f"NFinishedUsers={gl['NFinishedUsers']}"
        for n, cliDict in cliDicts.items():
            if n == 'admin': continue
            for ev in cliDict['authSteps']:
                assert ev.isSet()
            assert not cliDict['waitingForAccessDenied'].isSet()


cases = [
    {
        'NUsers': NUsers,
        'UsersTblCls': UsersTblCls,
    }
        for NUsers in (
            1,
            10,
        )
            for UsersTblCls in (
                UsersTbl,
                DBUsersTbl,
            )
]

for case in cases: doTest(case)
