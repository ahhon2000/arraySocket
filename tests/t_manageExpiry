#!/usr/bin/python3
try:from pathlib import Path as P;R=P.resolve;E=P.exists; F = R(P(__file__));\
    L = lambda p: p / 'cfg.py'; from handyPyUtil import A; exec(A)
except: O=open(R(next(filter(E,map(L,F.parents))))); exec(O.read()); O.close()

import sys, os
import time
from threading import Thread, Event
from pathlib import Path
from more_itertools import first

from handyPyUtil.classes import DictToObj

from .. import client, server
from . import TestKitAS

from ..server import UsersTbl
from ..server.dbUsersTbl import DBUsersTbl
from .spawnUsers import spawnUsers

MYSQL_CNF = Path(sys.argv[0]).absolute().parent / 'mysql.cnf'

def execAdminCmd(gl, n, cmd, cb=None, relogin=False):
    cliDicts = gl.cliDicts
    admLoggedIn = cliDicts['admin']['loggedIn'].wait(timeout=0.2)
    assert admLoggedIn

    admCli = cliDicts['admin']['cli']

    k = first(cliDicts[n]['user'].authKeys)

    def onResponse(m):
        st = m.get('status', 63)
        assert st == 0, f"status={st}: {m.get('descr')}"
        if cb: cb()
        if relogin:
            cliDicts[n]['loggedIn'].wait(timeout=0.2)
            cli = cliDicts[n]['cli']
            cli.login()

    m = {
        'type': 'admin',
        'command': cmd,
        'user': n,
        'authKey': k,
        'callback': onResponse,
    }

    admCli.pushMessage(m)
    admCli.sendMessages()


def startServer(gl):
    case = gl.case
    tk = gl.tk
    cliDicts = gl.cliDicts

    UsersTblCls = case.UsersTblCls

    usersTbl_kwarg = {}
    srv_kwarg = {
        'UsersTblCls': UsersTblCls,
        'usersTbl_kwarg': usersTbl_kwarg,
        'adminAuthKey': first(cliDicts['admin']['user'].authKeys),
    }

    if UsersTblCls is UsersTbl:
        usersTbl_kwarg.update({
            'authUsersInMem': True,
        })
    elif issubclass(UsersTblCls, DBUsersTbl):
        srv_kwarg.update({
            'read_default_file': MYSQL_CNF,
        })
    else: raise Exception(f'unsupported UsersTblCls={type(UsersTblCls)}')

    tk.startServer(**srv_kwarg)
    time.sleep(case.maxInitSec)

def registerUsers(gl):
    cliDicts = gl.cliDicts
    cliDicts['admin']['loggedIn'].wait(0.2)

    registered = []
    for n, cliDict in cliDicts.items():
        if n == 'admin': continue

        r = Event()
        def cb(r=r): r.set()
        execAdminCmd(gl, n, "addAuthKey", cb=cb)

    for r in registered:
        rst = r.wait(0.2)
        if not rst:
            tk.logger.error(f'user was not registered!')

def adminOnAuth(cli, gl, authst):
    "Admin actions after authentication go here"

    assert cli.user == 'admin'

def userOnAuth(cli, gl, authst):
    "Client actions after authentication go here"

    tk = gl.tk
    tk.logger.debug(f'entering userOnAuth()')

    for m in cli.listenToMessages(timeout=10):
        if m is None: break
        tk.logger.debug(f'got message: {m}')  # TODO rm

def startClients(gl, ns):
    class SMAClass_cli(client.ServerMessageArray):
        def on_auth(self, m):
            authst = super().on_auth(m)
            cli = self.cli
            cliDict = gl.cliDicts[cli.user]
            cliDict['cli'] = cli

            cli.logger.info(f'received an auth message from the server; user={cli.user}; status={authst}')

            if authst.status == 0:
                cliDict['loggedIn'].set()

            if cli.user == 'admin':
                adminOnAuth(cli, gl, authst)
            else:
                userOnAuth(cli, gl, authst)

        def on_admin(self, m): pass

    cliDicts = gl.cliDicts
    tk = gl.tk

    for n in ns:
        cliDict = cliDicts[n]
        u = cliDict['user']
        cli, thCli = tk.startClient(SMAClass=SMAClass_cli, user=u)
        cliDict.update({'cli': cli, 'thCli': thCli})

def initCliSrv(gl):
    cliDicts = gl.cliDicts

    startServer(gl)
    startClients(gl, ('admin',))
    registerUsers(gl)
    startClients(gl, tuple(n for n in cliDicts if n != 'admin'))

def doTest(case):
    with TestKitAS() as tk:
        cliDicts = spawnUsers(case.NUsers, genAuthKeys=True)
        gl = DictToObj({
            'case': case,
            'cliDicts': cliDicts,
            'tk': tk,
            'success': Event(),
        })

        initCliSrv(gl)
        gl.success.wait(3 + gl.case.NUsers * 0.3)
        assert gl.success.isSet()

cases = [
    DictToObj({
        'NUsers': 1,  # TODO set to 10
        'UsersTblCls': UsersTbl,
        'maxInitSec': 0.1
    }),
    # TODO uncomment all
    #DictToObj({
    #    'NUsers': 10,
    #    'UsersTblCls': DBUsersTbl,
    #    'maxInitSec': 0.3
    #}),
]

for case in cases:
    doTest(case)
