#!/usr/bin/python3
try:from pathlib import Path as P;R=P.resolve;E=P.exists; F = R(P(__file__));\
    L = lambda p: p / 'cfg.py'; from handyPyUtil import A; exec(A)
except: O=open(R(next(filter(E,map(L,F.parents))))); exec(O.read()); O.close()

import os, sys
import time
from pathlib import Path
from threading import Thread, Event
from more_itertools import first

from handyPyUtil.db import Database_mysql

from arraySocket import client, server
from ..server.dbUsersTbl import DBUsersTbl
from .. import ASUser

MYSQL_CNF = Path(sys.argv[0]).absolute().parent / 'mysql.cnf'


def getUser(utbl, name):
    q = utbl.dbobj
    urow = q[0] / f"""
        SELECT * FROM `{utbl.TRUser._tableName}`
    """

    keys = q(aslist=True, uid=urow['id']) / (lambda r: r['authKey']) / f"""
        SELECT authKey
        FROM `{utbl.TRAuthKey._tableName}`
        WHERE user = %(uid)s
    """

    u = ASUser(name=urow['name'], authKeys=keys, isAdmin=urow['isAdmin'])

    return u

def doTest():
    for srv_kwarg in (
        {
            # Check if the server's users table can connect to a MySQL DB
            'UsersTblCls': DBUsersTbl,
            'usersTbl_kwarg': {
                'db_kwarg': {
                    'read_default_file': str(MYSQL_CNF),
                },
            },
        }, {
            # Check if the Server constructor understands shorcut options
            'usersStorage': 'db',
            'read_default_file': str(MYSQL_CNF),
            'adminAuthKey': 'mysecret2983',
        }, {
            # Check if the Server constructor accepts a DB instance for UsersTbl
            'usersStorage': 'db',
            'adminAuthKey': 'mysecret3849',
            'dbobj': Database_mysql(read_default_file=str(MYSQL_CNF)),
        },
    ):
        srv = server.Server(**srv_kwarg)

        adminAuthKey = srv_kwarg.get('adminAuthKey')
        if srv_kwarg.get('UsersTblCls') is DBUsersTbl:
            adminAuthKey = 'mysecret154'
            srv.usersTbl.addAuthKey(
                username='admin', authKey=adminAuthKey, isAdmin=True
            )

        assert isinstance(srv.usersTbl, DBUsersTbl)
        q = srv.usersTbl.dbobj
        assert isinstance(q, Database_mysql)
        assert (q[0]['x'] / "SELECT 1 as x") == 1

        u = getUser(srv.usersTbl, 'admin')
        assert u.name == 'admin'
        assert adminAuthKey in u.authKeys

        if srv_kwarg.get('usersStorage') == 'db':
            assert len(u.authKeys) == 1
            assert first(u.authKeys) == adminAuthKey
            assert u.isAdmin

        q.close()

doTest()
