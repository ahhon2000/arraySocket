#!/usr/bin/python3
try:from pathlib import Path as P;R=P.resolve;E=P.exists; F = R(P(__file__));\
    L = lambda p: p / 'cfg.py'; from handyPyUtil import A; exec(A)
except: O=open(R(next(filter(E,map(L,F.parents))))); exec(O.read()); O.close()

#from handyPyUtil.imports import importByPath
#importByPath('..')
inclPath()

import time
from threading import Thread, Event

from arraySocket import client, ASUser
from arraySocket.tests import TestKitAS

def doTest(case):
    with TestKitAS() as tk:
        authComplete, authSuccess = None, None
        class SMAClass_cli(client.ServerMessageArray):
            def on_auth(self, m):
                s = super().on_auth(m)
                if s.status == 0:
                    authSuccess.set()

                authComplete.set()

        srvProc = tk.startServer(
            staticUsers = [
                ASUser(
                    name = case.get('name', ''),
                    authKey = case.get('authKey', ''),
                ),
            ],
        )
        time.sleep(0.1)

        for u, k, mustFail in (
            (
                case.get('name', ''), case.get('authKey', ''),
                case.get('mustFail', False),
            ),
            ('wrongUser', 'wrongKey', True),
        ):
            authComplete, authSuccess = Event(), Event()
            cli, thCli = tk.startClient(SMAClass=SMAClass_cli,
                user = u, authKey = k,
            )

            authComplete.wait(0.1)
            failMsg = f"case: {case}"
            if not mustFail: assert authSuccess.isSet(), failMsg
            else: assert not authSuccess.isSet(), failMsg
            cli.stop()

cases = [
    {
        'name': 'test_user',
        'mustFail': True,
    }, {
        'name': 'test_user', 'authKey': '',
        'mustFail': True,
    }, {
        'name': 'test_user', 'authKey': '1234',
        'mustFail': False,
    },
]

for case in cases: doTest(case)
